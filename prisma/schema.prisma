// This is your Prisma schema file
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Document este "clasa părinte"
model Document {
  nr_document         Int                  @id @default(autoincrement())
  data                DateTime
  // Relații de moștenire implementate prin one-to-one
  consum              Consum?
  cerereAprovizionare CerereAprovizionare?
}

model Angajati {
  id_angajat      Int        @id @default(autoincrement())
  nume_angajat    String
  prenume_angajat String
  functie         String
  telefon         String
  email           String
  data_angajare   DateTime
  Gestiune        Gestiune[]
  Consum          Consum[]
  livrare         Livrare[]
}

// Consum "moștenește" din Document
model Consum {
  id_consum   Int           @id
  valoare     Decimal
  data        DateTime      @default(now())
  id_sef      Int?
  id_gestiune Int
  document    Document      @relation(fields: [id_consum], references: [nr_document])
  sef         Angajati?     @relation(fields: [id_sef], references: [id_angajat])
  gestiune    Gestiune      @relation(fields: [id_gestiune], references: [id_gestiune])
  liniiConsum LinieConsum[]
}

// CerereAprovizionare "moștenește" din Document
model CerereAprovizionare {
  id_cerere   Int                        @id
  data        DateTime                   @default(now())
  id_gestiune Int
  valoare     Decimal
  status      StatusCerere               @default(IN_ASTEPTARE)
  document    Document                   @relation(fields: [id_cerere], references: [nr_document])
  gestiune    Gestiune                   @relation(fields: [id_gestiune], references: [id_gestiune])
  liniiCerere LinieCerereAprovizionare[]
}

// Restul modelelor rămân neschimbate
model Stoc {
  id_stoc          Int      @id @default(autoincrement())
  id_bun           Int
  id_gestiune      Int
  stoc_init_lunar  Decimal?
  stoc_actual      Decimal?
  prag_minim       Decimal?
  cantitate_optima Decimal?
  gestiune         Gestiune @relation(fields: [id_gestiune], references: [id_gestiune])
  bun              Bun      @relation(fields: [id_bun], references: [id_bun])
}

model Gestiune {
  id_gestiune         Int                   @id @default(autoincrement())
  denumire            String?
  id_gestionar        Int?
  angajatRelation     Angajati?             @relation(fields: [id_gestionar], references: [id_angajat])
  stocuri             Stoc[]
  consumuri           Consum[]
  cereriAprovizionare CerereAprovizionare[]
}

model Bun {
  id_bun                Int                        @id @default(autoincrement())
  nume_bun              String
  cantitate_disponibila Decimal
  pret_unitar           Decimal
  data_expirare         DateTime?
  unitate_masura        String
  stocuri               Stoc[]
  liniiConsumuri        LinieConsum[]
  liniiCereri           LinieCerereAprovizionare[]
  liniiReceptie         Linie_receptie[]
}

model LinieConsum {
  id_linie_consum    Int     @id @default(autoincrement())
  id_consum          Int
  id_bun             Int
  cantitate_necesara Decimal
  valoare            Decimal
  cant_eliberata     Decimal
  consum             Consum  @relation(fields: [id_consum], references: [id_consum])
  bun                Bun     @relation(fields: [id_bun], references: [id_bun])
}

model LinieCerereAprovizionare {
  id                  Int                 @id @default(autoincrement())
  id_cerere           Int
  id_bun              Int
  cantitate           Decimal
  valoare             Decimal
  observatii          String?
  cerereAprovizionare CerereAprovizionare @relation(fields: [id_cerere], references: [id_cerere])
  bun                 Bun                 @relation(fields: [id_bun], references: [id_bun])
}

model Receptie {
  id_receptie    Int              @id @default(autoincrement())
  data           DateTime         @default(now())
  valoare_totala Decimal          @default(0.0)
  linii_receptie Linie_receptie[]
}

model Linie_receptie {
  id_linie_receptie      Int                 @id @default(autoincrement())
  id_bun                 Int
  id_receptie            Int
  cantitate_receptionata Decimal
  pret                   Decimal
  status                 StatusLinieReceptie @default(receptionata)
  validat                Boolean             @default(false)

  bun      Bun      @relation(fields: [id_bun], references: [id_bun])
  receptie Receptie @relation(fields: [id_receptie], references: [id_receptie])
}

enum StatusLinieReceptie {
  receptionata
  partiala
  respinsa
}

model Comanda {
  id_comanda Int      @id @default(autoincrement())
  data       DateTime
  valoare    Decimal
  id_client  Int

  client         Client          @relation(fields: [id_client], references: [id_client])
  livrare        Livrare[]
  linie_comanda  Linie_comanda[]
  comanda_onsite Comenzi_onsite?
  comanda_online Comenzi_online?
}

model Client {
  id_client Int    @id @default(autoincrement())
  nume      String
  adresa    String
  telefon   String

  comenzi Comanda[]
}

model Linie_comanda {
  id_linie_comanda Int     @id @default(autoincrement())
  id_comanda       Int
  id_produs        Int
  cantitate        Int
  valoare          Decimal

  comanda Comanda @relation(fields: [id_comanda], references: [id_comanda])
  produs  Produs  @relation(fields: [id_produs], references: [id_produs])
}

model Produs {
  id_produs Int     @id @default(autoincrement())
  pret      Decimal
  cantitate Decimal
  um        String
  denumire  String
  id_reteta Int?

  // reteta       Reteta?         @relation(fields: [id_reteta], references: [id_reteta])
  liniiComanda Linie_comanda[]
}



model Comenzi_online {
  id_comanda     Int    @id
  adresa_livrare String

  comanda Comanda @relation(fields: [id_comanda], references: [id_comanda])
}

model Livrare {
  id_livrare     Int           @id @default(autoincrement())
  id_comanda     Int
  adresa_livrare String
  id_angajat     Int
  data_livrare   DateTime
  status_livrare StatusLivrare

  comanda Comanda  @relation(fields: [id_comanda], references: [id_comanda])
  angajat Angajati @relation(fields: [id_angajat], references: [id_angajat])
}

enum StatusLivrare {
  IN_ASTEPTARE       @map("În așteptare")
  IN_CURS_DE_LIVRARE @map("În curs de livrare")
  LIVRATA            @map("Livrată")
  ANULATA            @map("Anulată")
  NECONFIRMATA       @map("Neconfirmată")
}

enum StatusCerere {
  IN_ASTEPTARE @map("în așteptare")
  APROBATA     @map("aprobată")
  RESPINSA     @map("respinsă")
  FINALIZATA   @map("finalizată")
}
